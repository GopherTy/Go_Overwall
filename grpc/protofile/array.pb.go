// Code generated by protoc-gen-go. DO NOT EDIT.
// source: array.proto

package grpc_protofile_array

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ArrayRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArrayRequest) Reset()         { *m = ArrayRequest{} }
func (m *ArrayRequest) String() string { return proto.CompactTextString(m) }
func (*ArrayRequest) ProtoMessage()    {}
func (*ArrayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd08b6c373ffa45, []int{0}
}

func (m *ArrayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArrayRequest.Unmarshal(m, b)
}
func (m *ArrayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArrayRequest.Marshal(b, m, deterministic)
}
func (m *ArrayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArrayRequest.Merge(m, src)
}
func (m *ArrayRequest) XXX_Size() int {
	return xxx_messageInfo_ArrayRequest.Size(m)
}
func (m *ArrayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArrayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArrayRequest proto.InternalMessageInfo

type ArrayResponse struct {
	Array                []byte   `protobuf:"bytes,1,opt,name=Array,proto3" json:"Array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArrayResponse) Reset()         { *m = ArrayResponse{} }
func (m *ArrayResponse) String() string { return proto.CompactTextString(m) }
func (*ArrayResponse) ProtoMessage()    {}
func (*ArrayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd08b6c373ffa45, []int{1}
}

func (m *ArrayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArrayResponse.Unmarshal(m, b)
}
func (m *ArrayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArrayResponse.Marshal(b, m, deterministic)
}
func (m *ArrayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArrayResponse.Merge(m, src)
}
func (m *ArrayResponse) XXX_Size() int {
	return xxx_messageInfo_ArrayResponse.Size(m)
}
func (m *ArrayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArrayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArrayResponse proto.InternalMessageInfo

func (m *ArrayResponse) GetArray() []byte {
	if m != nil {
		return m.Array
	}
	return nil
}

func init() {
	proto.RegisterType((*ArrayRequest)(nil), "grpc.protofile.array.ArrayRequest")
	proto.RegisterType((*ArrayResponse)(nil), "grpc.protofile.array.ArrayResponse")
}

func init() { proto.RegisterFile("array.proto", fileDescriptor_6bd08b6c373ffa45) }

var fileDescriptor_6bd08b6c373ffa45 = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2c, 0x2a, 0x4a,
	0xac, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x49, 0x2f, 0x2a, 0x48, 0x86, 0xb0, 0xd3,
	0x32, 0x73, 0x52, 0xf5, 0xc0, 0x72, 0x4a, 0x7c, 0x5c, 0x3c, 0x8e, 0x20, 0x46, 0x50, 0x6a, 0x61,
	0x69, 0x6a, 0x71, 0x89, 0x92, 0x2a, 0x17, 0x2f, 0x94, 0x5f, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a,
	0x24, 0xc2, 0xc5, 0x0a, 0x16, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x82, 0x70, 0x8c, 0xd2,
	0xa0, 0xa2, 0x42, 0xb1, 0x5c, 0x42, 0xee, 0xa9, 0x25, 0xae, 0x79, 0xc9, 0x45, 0x95, 0x05, 0x25,
	0x99, 0xf9, 0x79, 0x10, 0x51, 0x25, 0x3d, 0x6c, 0x96, 0xe9, 0x21, 0xdb, 0x24, 0xa5, 0x8c, 0x57,
	0x0d, 0xc4, 0xf6, 0x24, 0x36, 0xb0, 0xb4, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x38, 0xf7, 0xeb,
	0xd6, 0xca, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArrayClient is the client API for Array service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArrayClient interface {
	GetEncryptionArray(ctx context.Context, in *ArrayRequest, opts ...grpc.CallOption) (*ArrayResponse, error)
}

type arrayClient struct {
	cc *grpc.ClientConn
}

func NewArrayClient(cc *grpc.ClientConn) ArrayClient {
	return &arrayClient{cc}
}

func (c *arrayClient) GetEncryptionArray(ctx context.Context, in *ArrayRequest, opts ...grpc.CallOption) (*ArrayResponse, error) {
	out := new(ArrayResponse)
	err := c.cc.Invoke(ctx, "/grpc.protofile.array.Array/GetEncryptionArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArrayServer is the server API for Array service.
type ArrayServer interface {
	GetEncryptionArray(context.Context, *ArrayRequest) (*ArrayResponse, error)
}

// UnimplementedArrayServer can be embedded to have forward compatible implementations.
type UnimplementedArrayServer struct {
}

func (*UnimplementedArrayServer) GetEncryptionArray(ctx context.Context, req *ArrayRequest) (*ArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEncryptionArray not implemented")
}

func RegisterArrayServer(s *grpc.Server, srv ArrayServer) {
	s.RegisterService(&_Array_serviceDesc, srv)
}

func _Array_GetEncryptionArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArrayServer).GetEncryptionArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.protofile.array.Array/GetEncryptionArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArrayServer).GetEncryptionArray(ctx, req.(*ArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Array_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.protofile.array.Array",
	HandlerType: (*ArrayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEncryptionArray",
			Handler:    _Array_GetEncryptionArray_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "array.proto",
}
